{"version":3,"sources":["ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/lib/json-exporter.service.ts"],"names":["CdkTableExporterModule","NgModule","args","declarations","imports","exports","CdkTableExporter","renderer","jsonExporter","this","sheetName","fileName","exportCompleted","EventEmitter","exportStarted","prototype","ngAfterViewInit","_this","listen","exporterButton","_elementRef","nativeElement","evt","exportTable","emit","_isIterating","_isExporting","_data","Array","enableExportButton","exportWithPagination","notPaginated","exportSinglePage","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","exportExtractedData","concat","extractExcelRows","getPageChangeObservable","subscribe","_","setTimeout","hasNextPage","nextPage","exportExcel","extractExcelHeaderRow","convertToJsonArray","getRenderedRows","cdkTable","_rowOutlet","_headerRowOutlet","outlet","_getRenderedRows","rows","result","i","length","row","convertRow","customizeRow","push","createExcelItem","cells","children","shouldHide","element","item","innerText","columnIndex","hiddenColumns","includes","Object","assign","getPageCount","value","setProperty","Input","Output","JsonExporterService","header","unshift","index","hideColumns","wb","XLSX.utils","book_new","ws","json_to_sheet","skipHeader","book_append_sheet","appendExtensionIfNotProvided","XLSX.writeFile","columns","ExcelExtension","XLSX","XLS","Injectable","providedIn"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { AfterViewInit, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { JsonExporterService } from './json-exporter.service';\r\n\r\n/**\r\n * Excel exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\nexport abstract class CdkTableExporter implements AfterViewInit {\r\n\r\n  @Input() cdkTable: any;\r\n  @Input() exporterButton: any;\r\n  @Input() sheetName = 'Sheet1';\r\n  @Input() fileName = 'export.xlsx';\r\n  @Input() hiddenColumns: Array<number>;\r\n  @Output() exportCompleted = new EventEmitter<void>();\r\n  @Output() exportStarted = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  constructor(protected renderer: Renderer2, protected jsonExporter: JsonExporterService) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  ngAfterViewInit(): void {\r\n    this.renderer.listen(this.exporterButton._elementRef.nativeElement, 'click', (evt) => {\r\n     this.exportTable();\r\n    });\r\n  }\r\n\r\n\r\n/**\r\n * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n */\r\n  exportTable() {\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(false);\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler(); // to make sure datasource is not null during export\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    this._data = this._data.concat(this.extractExcelRows());\r\n  }\r\n\r\n\r\n  private initPageHandler(): void {\r\n    this.getPageChangeObservable().subscribe(_ => {\r\n      setTimeout(() => {\r\n        if (this._isIterating) {\r\n          this.extractDataOnCurrentPage();\r\n          if (this.hasNextPage()) {\r\n            this.nextPage();\r\n          } else {\r\n            this._isIterating = false;\r\n            this.goToPage(this._initialPageIndex);\r\n          }\r\n        } else if (this._isExporting) {\r\n          this._isExporting = false;\r\n          this.exportExtractedData();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this.jsonExporter.exportExcel(this.extractExcelHeaderRow(), this._data, this.fileName, this.sheetName);\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(true);\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n\r\n  private extractExcelRows() {\r\n    return this.convertToJsonArray(this.getRenderedRows(this.cdkTable._rowOutlet));\r\n  }\r\n\r\n  private extractExcelHeaderRow() {\r\n    return this.convertToJsonArray(this.getRenderedRows(this.cdkTable._headerRowOutlet))[0];\r\n  }\r\n\r\n  private getRenderedRows(outlet: DataRowOutlet): HTMLTableRowElement[] {\r\n    const result = this.cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\r\n    return result;\r\n\r\n  }\r\n\r\n  private convertToJsonArray(rows: HTMLTableRowElement[]): Array<any> {\r\n    const result = new Array<any>();\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row: Array<string> = this.convertRow(rows[i]);\r\n      this.customizeRow(row);\r\n      result.push(this.createExcelItem(row));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private convertRow(row: HTMLTableRowElement): Array<string> {\r\n    const result = new Array<string>();\r\n    const cells: any = row.children;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      if (this.shouldHide(i)) {\r\n        continue;\r\n      }\r\n      const element = cells.item(i).innerText;\r\n      result.push(element);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private shouldHide(columnIndex: number) {\r\n    if (this.hiddenColumns && this.hiddenColumns.includes(columnIndex)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public customizeRow(row: Array<string>): Array<string> {\r\n    return row;\r\n  }\r\n\r\n  private createExcelItem(row: Array<string>): any {\r\n    return Object.assign({}, row);\r\n  }\r\n\r\n  public hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  public nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private enableExportButton(value: boolean) {\r\n      this.renderer.setProperty(this.exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\r\n  }\r\n}\r\n\r\n","import { Injectable } from \"@angular/core\";\nimport * as XLSX from \"xlsx\";\n\n@Injectable({\n  providedIn: \"root\"\n})\n\n/**\n * An angular service class that is used to create excel files out of json object arrays.\n */\nexport class JsonExporterService {\n  constructor() {}\n\n  /**\n   * Exports excel file by employing xlsx sheetjs\n   * @param header Any json object that holds the header information of the exported excel file aka the first row of the excel\n   * @param rows Any json array that will be the rows of the exported excel\n   * @param fileName Exported excel file's name\n   * @param sheetName The name of the sheet that keeps the exported data\n   * @param hiddenColumns Properties that are wanted to be hidden, i.e. id, createdDate, auditable properties etc.\n   */\n  public exportExcel(\n    header: any,\n    rows: Array<any>,\n    fileName: string,\n    sheetName: string,\n    hiddenColumns?: Array<string>\n  ) {\n    rows.unshift(header);\n\n    if (hiddenColumns) {\n      for (let index = 0; index < rows.length; index++) {\n        rows[index] = this.hideColumns(hiddenColumns, rows[index]);\n      }\n    }\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we are skipping header otherwise xlsx puts the properties of the given json object\n    });\n    XLSX.utils.book_append_sheet(wb, ws, sheetName);\n    fileName = this.appendExtensionIfNotProvided(fileName);\n    /* save to file */\n    XLSX.writeFile(wb, fileName);\n  }\n\n  /**\n   * Hides unwanted properties of an entity\n   * @param columns properties to be hidden in the returned object\n   * @param item an item that corresponds to a row inside the exported excel\n   */\n  private hideColumns(columns: Array<string>, item: any) {\n    for (let index = 0; index < columns.length; index++) {\n      const element = columns[index];\n      delete item[element];\n    }\n  }\n\n  /**\n   * Provides default file extension (which is xlsx) to the parameter fileName\n   */\n  private appendExtensionIfNotProvided(fileName: string): string {\n    if (\n      !fileName.includes(ExcelExtension.XLSX) &&\n      !fileName.includes(ExcelExtension.XLS)\n    ) {\n      fileName = fileName.concat(ExcelExtension.XLSX);\n    }\n    return fileName;\n  }\n}\n\nexport enum ExcelExtension {\n  XLSX = \".xlsx\",\n  XLS = \".xls\"\n}\n"]}