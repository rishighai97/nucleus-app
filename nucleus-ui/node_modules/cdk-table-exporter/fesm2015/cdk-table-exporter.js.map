{"version":3,"file":"cdk-table-exporter.js.map","sources":["ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/lib/json-exporter.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { AfterViewInit, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { JsonExporterService } from './json-exporter.service';\r\n\r\n/**\r\n * Excel exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\nexport abstract class CdkTableExporter implements AfterViewInit {\r\n\r\n  @Input() cdkTable: any;\r\n  @Input() exporterButton: any;\r\n  @Input() sheetName = 'Sheet1';\r\n  @Input() fileName = 'export.xlsx';\r\n  @Input() hiddenColumns: Array<number>;\r\n  @Output() exportCompleted = new EventEmitter<void>();\r\n  @Output() exportStarted = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  constructor(protected renderer: Renderer2, protected jsonExporter: JsonExporterService) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  ngAfterViewInit(): void {\r\n    this.renderer.listen(this.exporterButton._elementRef.nativeElement, 'click', (evt) => {\r\n     this.exportTable();\r\n    });\r\n  }\r\n\r\n\r\n/**\r\n * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n */\r\n  exportTable() {\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(false);\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler(); // to make sure datasource is not null during export\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    this._data = this._data.concat(this.extractExcelRows());\r\n  }\r\n\r\n\r\n  private initPageHandler(): void {\r\n    this.getPageChangeObservable().subscribe(_ => {\r\n      setTimeout(() => {\r\n        if (this._isIterating) {\r\n          this.extractDataOnCurrentPage();\r\n          if (this.hasNextPage()) {\r\n            this.nextPage();\r\n          } else {\r\n            this._isIterating = false;\r\n            this.goToPage(this._initialPageIndex);\r\n          }\r\n        } else if (this._isExporting) {\r\n          this._isExporting = false;\r\n          this.exportExtractedData();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this.jsonExporter.exportExcel(this.extractExcelHeaderRow(), this._data, this.fileName, this.sheetName);\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(true);\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n\r\n  private extractExcelRows() {\r\n    return this.convertToJsonArray(this.getRenderedRows(this.cdkTable._rowOutlet));\r\n  }\r\n\r\n  private extractExcelHeaderRow() {\r\n    return this.convertToJsonArray(this.getRenderedRows(this.cdkTable._headerRowOutlet))[0];\r\n  }\r\n\r\n  private getRenderedRows(outlet: DataRowOutlet): HTMLTableRowElement[] {\r\n    const result = this.cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\r\n    return result;\r\n\r\n  }\r\n\r\n  private convertToJsonArray(rows: HTMLTableRowElement[]): Array<any> {\r\n    const result = new Array<any>();\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row: Array<string> = this.convertRow(rows[i]);\r\n      this.customizeRow(row);\r\n      result.push(this.createExcelItem(row));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private convertRow(row: HTMLTableRowElement): Array<string> {\r\n    const result = new Array<string>();\r\n    const cells: any = row.children;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      if (this.shouldHide(i)) {\r\n        continue;\r\n      }\r\n      const element = cells.item(i).innerText;\r\n      result.push(element);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private shouldHide(columnIndex: number) {\r\n    if (this.hiddenColumns && this.hiddenColumns.includes(columnIndex)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public customizeRow(row: Array<string>): Array<string> {\r\n    return row;\r\n  }\r\n\r\n  private createExcelItem(row: Array<string>): any {\r\n    return Object.assign({}, row);\r\n  }\r\n\r\n  public hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  public nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private enableExportButton(value: boolean) {\r\n      this.renderer.setProperty(this.exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\r\n  }\r\n}\r\n\r\n","import { Injectable } from \"@angular/core\";\nimport * as XLSX from \"xlsx\";\n\n@Injectable({\n  providedIn: \"root\"\n})\n\n/**\n * An angular service class that is used to create excel files out of json object arrays.\n */\nexport class JsonExporterService {\n  constructor() {}\n\n  /**\n   * Exports excel file by employing xlsx sheetjs\n   * @param header Any json object that holds the header information of the exported excel file aka the first row of the excel\n   * @param rows Any json array that will be the rows of the exported excel\n   * @param fileName Exported excel file's name\n   * @param sheetName The name of the sheet that keeps the exported data\n   * @param hiddenColumns Properties that are wanted to be hidden, i.e. id, createdDate, auditable properties etc.\n   */\n  public exportExcel(\n    header: any,\n    rows: Array<any>,\n    fileName: string,\n    sheetName: string,\n    hiddenColumns?: Array<string>\n  ) {\n    rows.unshift(header);\n\n    if (hiddenColumns) {\n      for (let index = 0; index < rows.length; index++) {\n        rows[index] = this.hideColumns(hiddenColumns, rows[index]);\n      }\n    }\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we are skipping header otherwise xlsx puts the properties of the given json object\n    });\n    XLSX.utils.book_append_sheet(wb, ws, sheetName);\n    fileName = this.appendExtensionIfNotProvided(fileName);\n    /* save to file */\n    XLSX.writeFile(wb, fileName);\n  }\n\n  /**\n   * Hides unwanted properties of an entity\n   * @param columns properties to be hidden in the returned object\n   * @param item an item that corresponds to a row inside the exported excel\n   */\n  private hideColumns(columns: Array<string>, item: any) {\n    for (let index = 0; index < columns.length; index++) {\n      const element = columns[index];\n      delete item[element];\n    }\n  }\n\n  /**\n   * Provides default file extension (which is xlsx) to the parameter fileName\n   */\n  private appendExtensionIfNotProvided(fileName: string): string {\n    if (\n      !fileName.includes(ExcelExtension.XLSX) &&\n      !fileName.includes(ExcelExtension.XLS)\n    ) {\n      fileName = fileName.concat(ExcelExtension.XLSX);\n    }\n    return fileName;\n  }\n}\n\nexport enum ExcelExtension {\n  XLSX = \".xlsx\",\n  XLS = \".xls\"\n}\n"],"names":["XLSX.utils","XLSX.writeFile"],"mappings":"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"}
